# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'editTeam.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from teamSelection import Ui_OtherWindow
import sqlite3
conn=sqlite3.connect('TheGameHub.db')
curs=conn.cursor()

class Ui_OtherWindow1(object):
    def setupUi(self, OtherWindow1):
        OtherWindow1.setObjectName("OtherWindow1")
        OtherWindow1.resize(325, 416)
        OtherWindow1.setStyleSheet("background-color: rgb(171, 255, 107);")
        self.centralwidget = QtWidgets.QWidget(OtherWindow1)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(-1, 12, -1, 2)
        self.gridLayout.setVerticalSpacing(12)
        self.gridLayout.setObjectName("gridLayout")
        self.players_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.players_label.setFont(font)
        self.players_label.setObjectName("players_label")
        self.gridLayout.addWidget(self.players_label, 2, 0, 1, 1)
        self.choose_label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.choose_label.setFont(font)
        self.choose_label.setObjectName("choose_label")
        self.gridLayout.addWidget(self.choose_label, 0, 0, 1, 1)
        self.players_list = QtWidgets.QListWidget(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(10)
        self.players_list.setFont(font)
        self.players_list.setStyleSheet("background-color: rgb(207, 255, 185);")
        self.players_list.setObjectName("players_list")
        self.gridLayout.addWidget(self.players_list, 4, 0, 1, 1)
        self.cb_team = QtWidgets.QComboBox(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setBold(True)
        font.setWeight(75)
        self.cb_team.setFont(font)
        self.cb_team.setStyleSheet("background-color: rgb(230, 230, 230);")
        self.cb_team.setObjectName("cb_team")
        self.cb_team.addItem("")
        self.gridLayout.addWidget(self.cb_team, 1, 0, 1, 1)
        self.edit_btn = QtWidgets.QPushButton(self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 153, 194))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.edit_btn.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.edit_btn.setFont(font)
        self.edit_btn.setStyleSheet("background-color: rgb(255, 153, 194);")
        self.edit_btn.setObjectName("edit_btn")
        self.gridLayout.addWidget(self.edit_btn, 8, 0, 1, 1)
        OtherWindow1.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(OtherWindow1)
        self.statusbar.setObjectName("statusbar")
        OtherWindow1.setStatusBar(self.statusbar)

        self.cb_team.activated.connect(self.load_players)
        
        self.load_teams()

        self.retranslateUi(OtherWindow1)
        QtCore.QMetaObject.connectSlotsByName(OtherWindow1)

    def retranslateUi(self, OtherWindow1):
        _translate = QtCore.QCoreApplication.translate
        OtherWindow1.setWindowTitle(_translate("OtherWindow1", "Edit Team"))
        self.players_label.setText(_translate("OtherWindow1", "Team Players:"))
        self.choose_label.setText(_translate("OtherWindow1", "Choose Team To Edit:"))
        self.cb_team.setItemText(0, _translate("OtherWindow1", "SELECT TEAM"))
        self.edit_btn.setText(_translate("OtherWindow1", "Edit Team"))

    def load_teams(self):
        curs.execute('SELECT Name from Teams;')           
        Teams = curs.fetchall()
        l=len(Teams)
        for i in range(0,l):
            row=Teams[i]
            team=row[0]
            self.cb_team.addItem(team)

    def load_players(self):
        self.players_list.clear()
        txt=self.cb_team.currentText()
        if txt != "SELECT TEAM":
            curs.execute('SELECT Players from Teams WHERE Name="{}";'.format(txt))
            rec=curs.fetchone()        
            players = self.string_to_list(rec[0])        
            self.players_list.addItems(players)
            self.edit_btn.clicked.connect(self.editTeam)
        else:
            msg = QMessageBox()
            msg.setWindowTitle("Warning")
            msg.setText("Invalid Selection.")
            msg.setIcon(QMessageBox.Warning)
            x=msg.exec()

    def string_to_list(self,string):        
        items = []
        item = ""
        itemExpected = True
        for char in string[1:]:
            if itemExpected and char not in ["]", ",", "[", "'"]:
                item += char                
            elif char in [",", "[", "]"]:
                itemExpected = True
                items.append(item)
                item = ""
        i=1
        for txt in items[1:]:
            items[i]=txt[1:]
            i+=1
            if i==12:break
        return items
    
    def editTeam(self):
        self.selectionWindow = QtWidgets.QMainWindow()
        self.ui = Ui_OtherWindow()
        self.ui.setupUi(self.selectionWindow)
        self.selectionWindow.show()
        txt=self.cb_team.currentText()
        self.ui.lineEdit.setReadOnly(True)
        self.ui.lineEdit.setText(str(txt))
        self.resetstatus()
        curs.execute('SELECT Players,Value FROM Teams WHERE Name="{}";'.format(txt))
        row=curs.fetchone()
        if row != None:
            selected = self.string_to_list(row[0])            
            self.ui.selected_list.addItems(selected)
            list1=[self.ui.selected_list.item(i).text() for i in range(self.ui.selected_list.count())]
            for Player in self.ui.bat_data:
                if Player[0] not in list1:
                    self.ui.bat_list.addItem(Player[0])
            self.ui.bat_btn.setChecked(True)
            for Player in self.ui.bowl_data:
                if Player[0] not in list1:
                    self.ui.bowl_list.addItem(Player[0])
            for Player in self.ui.ar_data:
                if Player[0] not in list1:
                    self.ui.ar_list.addItem(Player[0])
            for Player in self.ui.wk_data:
                if Player[0] not in list1:
                    self.ui.wk_list.addItem(Player[0])
            self.ui.used = row[1]
            self.ui.avl = 1200-row[1]            
            for i in range(self.ui.selected_list.count()):
                player=self.ui.selected_list.item(i).text()                
                curs.execute('SELECT Ctg FROM Stats WHERE Player="{}";'.format(player))
                row = curs.fetchone()                
                ctgr=row[0]
                if ctgr == "BAT":self.ui.bat+=1
                if ctgr == "BWL":self.ui.bowl+=1
                if ctgr == "AR":self.ui.ar+=1
                if ctgr == "WK":self.ui.wk+=1            
        else:
            msg1 = QMessageBox()
            msg1.setWindowTitle("The Game Hub")
            msg1.setText("Team doesn't exist!")
            msg1.setIcon(QMessageBox.Warning)
            y=msg1.exec()
        self.ui.showstatus()
        self.ui.save_btn.clicked.connect(lambda: self.saveTeam("Edit team"))

    def saveTeam(self, action):
        self.ui.wk = int(self.ui.wk_no.text())
        team_name = self.ui.lineEdit.text()
        players_list = [self.ui.selected_list.item(i).text() for i in range(self.ui.selected_list.count())]
        values = int(self.ui.pts_used.text())
        if action == "Edit team":
            curs.execute('UPDATE Teams SET Players = "{}", Value = "{}" WHERE Name = "{}";'.format(players_list,values,team_name))
            conn.commit()
            msg2 = QMessageBox()
            msg2.setWindowTitle("Save Team")
            msg2.setText("Your Team is successfully saved.")
            msg2.setIcon(QMessageBox.Information)
            z=msg2.exec()
    
    def resetstatus(self):
        self.ui.bat=0
        self.ui.bowl=0
        self.ui.ar=0
        self.ui.wk=0
        self.ui.avl=1000
        self.ui.used=0
        self.ui.bat_list.clear()
        self.ui.bowl_list.clear()
        self.ui.ar_list.clear()
        self.ui.wk_list.clear()
        self.ui.selected_list.clear()
        self.ui.showstatus()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    OtherWindow1 = QtWidgets.QMainWindow()
    ui = Ui_OtherWindow1()
    ui.setupUi(OtherWindow1)
    OtherWindow1.show()
    sys.exit(app.exec_())
